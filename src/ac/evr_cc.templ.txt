#include <fw/fw.h>
#include <fw/fw_time.h>
#include <fw/serializable.h>

#include <evrs.h>
#include <kernel/kernel.h>

{% for evr in evrs %}
void evr_{{ evr.name }}(
{%- for arg in evr.args %}
{{- arg.qual_type() }} {{ arg.name }}
{%- if not loop.last -%}, {% endif -%}
{%- endfor %})
{
    u8 back_buf[{{ evr.get_size() }} + 4 + Fw::Time::SERIALIZED_SIZE];
    Fw::ExternalSerializeBuffer buf(back_buf, sizeof(back_buf));

    Fw::SerializeStatus status;

    // The command ID
    status = buf.serialize({{ evr.evr_id }});
    FW_ASSERT(Fw::FW_SERIALIZE_OK == status, status);

    // The timestamp
    Fw::Time time; // current time from kernel
    status = buf.serialize(time);
    FW_ASSERT(Fw::FW_SERIALIZE_OK == status, status);

    // Serialize each argument
    {% for arg in evr.args -%}
    {% if arg.type_ == "string" -%}
    const char* {{ arg.name}}_c_str = {{ arg.name }};
    status = buf.serialize(reinterpret_cast<const u8*>({{ arg.name }}_c_str), {{ arg.name }}.GetLength());
    FW_ASSERT(Fw::FW_SERIALIZE_OK == status, status);
    {% else %}
    status = buf.serialize({{ arg.name }});
    FW_ASSERT(Fw::FW_SERIALIZE_OK == status, status);
    {% endif %}
    {% endfor -%}

    kernel::evrEngine.log(buf);
}

{% endfor %}
